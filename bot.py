import telebot
from telebot import types
import sqlite3
from functools import partial

db = sqlite3.connect("base_data.db")
cur = db.cursor()

names = None

cur.execute("""
    CREATE TABLE IF NOT EXISTS notes (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        note_name TEXT,
        note_text TEXT
    )
""")
db.commit()
db.close()

token = "token"
bot = telebot.TeleBot(token = token)


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    btn1 = types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data="create_note")
    btn2 = types.InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–º–µ—Ç–∫–∏", callback_data="view_notes")
    btn3 = types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data="delete_note")
    
    markup.add(btn1, btn2, btn3)

    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! üëã\n–Ø QuantumNotebot ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ –ø—Ä—è–º–æ –≤ Telegram. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n1) –°–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏ ‚úçÔ∏è\n2) –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤—Å–µ —Ç–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏ üìë\n3) –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏ üõ†Ô∏è\n4) –£–¥–∞–ª—è—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ üóëÔ∏è\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "delete_note")
def delete(call):
    global names
    with sqlite3.connect("base_data.db") as db:
        cur = db.cursor()
        cur.execute("SELECT note_name FROM notes WHERE user_id = ?", (call.message.chat.id,))
        names = cur.fetchall()
        
        if not names:
            bot.send_message(call.message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
            return

        markup = types.InlineKeyboardMarkup(row_width=2)
        for note in names:
            note_name = note[0]
            btn = types.InlineKeyboardButton(note_name, callback_data=f"delete_{note_name}")
            markup.add(btn)

        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_"))
def delete_notes(call):
    note_name = call.data[7:]

    with sqlite3.connect("base_data.db") as db:
        cur = db.cursor()
        cur.execute("DELETE FROM notes WHERE user_id = ? AND note_name = ?", (call.message.chat.id, note_name))
        db.commit()

    markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∑–∞–Ω–æ–≤–æ", callback_data="restart")
    markup.add(btn)

    bot.send_message(call.message.chat.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –∑–∞–º–µ—Ç–∫—É '{note_name}'", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "view_notes")
def view_notes_callback(call):
    with sqlite3.connect("base_data.db") as db:
        cur = db.cursor()
        cur.execute("SELECT note_name FROM notes WHERE user_id = ?", (call.message.chat.id,))
        names = cur.fetchall()
        info = ''
        if not names:
            bot.send_message(call.message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π")

        markup = types.InlineKeyboardMarkup(row_width=2)
        for note in names:
            note_name = note[0]
            btn = types.InlineKeyboardButton(note_name, callback_data=f"show_{note_name}")
            markup.add(btn)

        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("show_"))
def show_text(call):
    note_name = call.data[5:]

    with sqlite3.connect("base_data.db") as db:
        cur = db.cursor()
        cur.execute("SELECT note_text FROM notes WHERE user_id = ? AND note_name = ?", (call.message.chat.id, note_name))
        note_text = cur.fetchone()

    txt = ""

    for el in note_text:
        txt += el

    if note_text:
        markup = types.InlineKeyboardMarkup()
        btn = types.InlineKeyboardButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–Ω–æ–≤–æ –±–æ—Ç–∞!!", callback_data="restart")
        markup.add(btn)
        
        bot.send_message(call.message.chat.id, f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏ '{note_name}':\n\n{txt}", reply_markup=markup)
    else:
        bot.send_message(call.message.chat.id, f"–í –∑–∞–º–µ—Ç–∫–µ '{note_name}' –Ω–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ")


@bot.callback_query_handler(func=lambda call: call.data == "create_note")
def create_note_callback(call):
    bot.send_message(call.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∑–∞–º–µ—Ç–∫–∏ üìë")
    bot.register_next_step_handler(call.message, name)

def name(message):
    note_name = message.text.strip()
    user_id = message.chat.id

    with sqlite3.connect("base_data.db") as db:
        cur = db.cursor()

        cur.execute("SELECT COUNT(*) FROM notes WHERE user_id = ? AND note_name = ?", (user_id, note_name))
        if cur.fetchone()[0] > 0:
            bot.send_message(message.chat.id, f"–ó–∞–º–µ—Ç–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{note_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
            return

        cur.execute("INSERT INTO notes (user_id, note_name) VALUES (?, ?)", (user_id, note_name))
        db.commit()

    bot.send_message(message.chat.id, f"–ó–∞–º–µ—Ç–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{note_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏.")
    bot.register_next_step_handler(message, partial(text, note_name=note_name))


def text(message, note_name):
    text_note = message.text.strip()
    user_id = message.chat.id

    with sqlite3.connect("base_data.db") as db:
        cur = db.cursor()

        cur.execute("SELECT COUNT(*) FROM notes WHERE user_id = ? AND note_name = ? AND note_text = ?", 
                    (user_id, note_name, text_note))
        
        result = cur.fetchone()

        if result and result[0] > 0:
            bot.send_message(message.chat.id, "–ó–∞–º–µ—Ç–∫–∞ —Å —Ç–∞–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç.")
            return
        else:
            cur.execute("UPDATE notes SET note_text = ? WHERE user_id = ? AND note_name = ?", 
                        (text_note, user_id, note_name))
            db.commit()

    markup = types.InlineKeyboardMarkup(row_width=1)
    btn1 = types.InlineKeyboardButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ —Å–Ω–æ–≤–∞!", callback_data="restart")
    markup.add(btn1)

    bot.send_message(message.chat.id, f"–¢–µ–∫—Å—Ç –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ '{note_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —Å–Ω–æ–≤–∞!", reply_markup=markup)




@bot.callback_query_handler(func=lambda call: call.data == "restart")
def restart(call):
    start(call.message)


bot.infinity_polling()
